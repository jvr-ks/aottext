/* ********************************************************************************* *  * aottext.ahk * (new Version AHK2) *  * Fileencoding: UTF-8 BOM (configfiles: UTF 16 LE-BOM) * Autohotkey internal: UTF-16 *  * Version: look at appVersion := below *  * Copyright (c) 2024 jvr.de. All rights reserved. * * **********************************************************************************//* ********************************************************************************* *  * GNU GENERAL PUBLIC LICENSE *  * A copy is included in the file "license.txt" *  **********************************************************************************/#Requires AutoHotkey v2#SingleInstance Force#Warn#Include aottextGlobalVariables.ahk#Include aottextConfig.ahk#Include aottextHelper.ahk#Include aottextHintColored.ahk#Include aottextHtmlViewer.ahk#Include aottextMainMenu.ahk#Include lib\GuiEditFontsMenu.ahk#Include lib\GuiFontsMenu.ahk#Include lib\FontsHelper.ahk#Include aottextMainWindow.ahk#Include aottextScintilla2.ahk#Include aottextHotkeys.ahk#Include aottextTODO.ahklicense := "GNU GENERAL PUBLIC LICENSE"FileEncoding("UTF-8")SetTitleMatchMode(2)DetectHiddenWindows(true)SendMode("Input")wrkDir := A_ScriptDir . "\"clipboardSave := ClipboardAll()actualContent := "";-------------------------------- read cmdline param --------------------------------hasParams := A_Args.Lengthstarthidden := 0if (hasParams != 0){  Loop hasParams  {    if(eq(A_Args[A_index],"remove")){      ExitApp(0)    }    if(eq(A_Args[A_index],"hidewindow")){      starthidden := 1    }  }}appName := "Aottext"appnameLower := "aottext"extension := ".exe"appVersion := "0.018"; 64bit onlyapp := appName . " " . appVersionconfigFileLocal := appnameLower ".ini"configFileHidden := "_"  appnameLower ".ini"if (FileExist(configFileLocal))  configFile := configFileLocal  if (FileExist(configFileHidden))  configFile := configFileHiddeninitGlobalVariables()readConfig()readGuiData()checkDirectories()refreshAllfiles()generateMainMenu()readInsertable()mainWindow(starthidden)setAOT()setAutosmall()setNoWrap()readLastUsed()updateLastUsedFile(lastUsedFile)OnMessage(0x200, WM_MOUSEMOVE)return;------------------------------- WM_MOUSEMOVE -------------------------------WM_MOUSEMOVE(wParam, lParam, *){  global    if (guiMainMode = 2){    NModeAction()    setNoWrap()  }};--------------------------------- readFile ---------------------------------readFile(filepath, filename){  global   local file, newContent, savePath  if (FileExist(filepath)){    file := FileOpen(filepath,"r")    actualContent := file.Read()    file.Close()    if (StrLen(actualContent) < 3 || !InStr(actualContent, "`n"))      actualContent .= "`n`n"    guiMainEdit.clearAll()    setTextToGuiMainEdit(actualContent)    updateLastUsedFile(filename)  } else {    showHintColored("File " . filepath . " was not found!")  }};------------------------------ refreshAllfiles ------------------------------refreshAllfiles(holdWposition := false) {  global     allfiles := []  dir := pathToAbsolut(saveDir)  Loop Files dir "*.*" {    allfiles.push(A_LoopFileName)  }  allfilesMaxCount := allfiles.Length      if (allfilesMaxCount != 0){    if (!holdWposition)      wheelPosition := allfilesMaxCount  } else {    showHintColored("Directory of saved files is empty!")    wheelPosition := 1  }};--------------------------------- errorExit ---------------------------------errorExit(theMsgArr, clp := "") {    msgComplete := ""  for index, element in theMsgArr  {    msgComplete .= element . "`n"  }  MsgBox(msgComplete, "ERROR", 48)    exit()};------------------------------- exitAndReload -------------------------------exitAndReload(*){  global clipboardSave    saveIfChanged()  saveConfig()  A_Clipboard := clipboardSave  Reload()};----------------------------------- Exit -----------------------------------exit(*){  global clipboardSave    saveIfChanged()  saveConfig()    A_Clipboard := clipboardSave  ExitApp()};----------------------------------------------------------------------------